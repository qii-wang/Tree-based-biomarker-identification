xs = sort(unique(simu_res_full$x))
model_colors = c("DART20" = "red", "DART50" = "maroon", "DART200"="orchid1",
"XGBoost_Cover"="dodgerblue", "XGBoost_Gain"="blue4",
"RF_Impu"="green4", "RF_CImpu"="green", "RF_Permu"="palegreen",
"RF_MinDepth"="darkturquoise", "BART_Local"="purple", "ALT_CIF"="orange")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop")
unique(simu_res$x)
simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last")
simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T)
simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop_last")
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_grid(p ~ bound) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 2)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_wrap(p ~ bound, ncol = 2) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 2)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
simu_res_full = read_csv("./ROC/Combined_data_ROC.csv", show_col_types = FALSE)
simu_res_full = filter(simu_res_full, model %in% c("DART50",
"XGBoost_Gain",
"RF_Impu", "RF_Permu",
"RF_MinDepth", "BART_Local", "ALT_CIF"))
simu_res_full
library(readr)
library(tidyverse)
library(ggplot2)
simu_res_full = read_csv("./ROC/Combined_data_ROC.csv", show_col_types = FALSE)
simu_res_full = filter(simu_res_full, model %in% c("DART50",
"XGBoost_Gain",
"RF_Impu", "RF_Permu",
"RF_MinDepth", "BART_Local", "ALT_CIF"))
simu_res_full$model[which(simu_res_full$model == "RF_Impu")] = "RF_Impurity"
simu_res_full$model[which(simu_res_full$model == "RF_Permu")] = "RF_Permutation"
simu_res_full$model[which(simu_res_full$model == "BART_Local")] = "BART"
simu_res_full$model[which(simu_res_full$model == "ALT_CIF")] = "ALT"
simu_res_full$model = factor(simu_res_full$model, levels = c("BART", "DART50",
"RF_Impurity", "RF_Permutation",
"RF_MinDepth", "ALT", "XGBoost_Gain"))
simu_res_full$signal = as.integer(simu_res_full$true_beta != 0)
xs = sort(unique(simu_res_full$x))
model_colors = c( "DART50" = "red",
"XGBoost_Gain"="blue4",
"RF_Impurity"="green4", "RF_Permutation"="palegreen",
"RF_MinDepth"="darkturquoise", "BART"="purple", "ALT"="orange")
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_wrap(p ~ bound, ncol = 2) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 2)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_wrap(p ~ bound, ncol = 2) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "right") +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_wrap(p ~ bound, ncol = 2, labeller = label_both) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "right") +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_wrap(~ bound, ncol = 2, labeller = label_both) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "right") +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
library(readr)
library(tidyverse)
library(ggplot2)
simu_res_full = read_csv("./ROC/Combined_data_ROC.csv", show_col_types = FALSE)
simu_res_full = filter(simu_res_full, model %in% c("DART50",
"XGBoost_Gain",
"RF_Impu", "RF_Permu",
"RF_MinDepth", "BART_Local", "ALT_CIF"))
simu_res_full$model[which(simu_res_full$model == "RF_Impu")] = "RF_Impurity"
simu_res_full$model[which(simu_res_full$model == "RF_Permu")] = "RF_Permutation"
simu_res_full$model[which(simu_res_full$model == "BART_Local")] = "BART"
simu_res_full$model[which(simu_res_full$model == "ALT_CIF")] = "CIF"
simu_res_full$model = factor(simu_res_full$model, levels = c("BART", "DART50",
"RF_Impurity", "RF_Permutation",
"RF_MinDepth", "CIF", "XGBoost_Gain"))
model_colors = c( "DART50" = "red",
"XGBoost_Gain"="blue4",
"RF_Impurity"="green4", "RF_Permutation"="palegreen",
"RF_MinDepth"="darkturquoise", "BART"="purple", "CIF"="orange")
fun_simulatePlot <- function(data, which = c("boxplot", "line"), aes, xlab, ylab, size = NA_real_, ...) {
which <- match.arg(which)
if (missing(xlab) && !rlang:::quo_is_missing(aes$x)) xlab <- as_label(aes$x)
if (missing(ylab) && !rlang:::quo_is_missing(aes$y)) ylab <- as_label(aes$y)
geom <- switch(
which,
line = list(geom_line(aes["group"]), geom_point(size = replace_na(size, 1))),  # geom_point(aes["group"], )
boxplot = list(geom_boxplot(width = .5, size = replace_na(size, .5), na.rm = T, show.legend = F, ...),
stat_summary(aes["group"], geom = "line", position = position_dodge(.5), linewidth = .5, alpha = .7, fun = median, na.rm = T))
)
ggplot(data, aes[names(aes) != "group"]) +
geom + labs(x = xlab, y = ylab, color = NULL) +
theme(legend.position = "bottom")
}
facet <- facet_grid(p ~ p0 + n, labeller = label_both, scales = "free_y")
color <- if (!is.null(model_colors)) scale_color_manual(values = model_colors)
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(time = time[1], .groups = "drop") %>%
fun_simulatePlot("boxplot", aes(x = factor(x), y = time, color = model, group = model),
xlab = "bound", ylab = "running time", outlier.size = .3) +
guides(color = guide_legend(nrow = 2, byrow = TRUE)) +
# facet +
color
ggsave(paste0("./Running time/ENAR_running_time_", type, ".png"), width = 7.5, height = 9, plot = pp)
}
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(time = time[1], .groups = "drop") %>%
fun_simulatePlot("boxplot", aes(x = factor(x), y = time, color = model, group = model),
xlab = "bound", ylab = "running time", outlier.size = .3) +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
theme(legend.position = "right") +
# facet +
color
ggsave(paste0("./Running time/ENAR_running_time_", type, ".png"), width = 7.5, height = 9, plot = pp)
}
fun_simulatePlot <- function(data, which = c("boxplot", "line"), aes, xlab, ylab, size = NA_real_, ...) {
which <- match.arg(which)
if (missing(xlab) && !rlang:::quo_is_missing(aes$x)) xlab <- as_label(aes$x)
if (missing(ylab) && !rlang:::quo_is_missing(aes$y)) ylab <- as_label(aes$y)
geom <- switch(
which,
line = list(geom_line(aes["group"]), geom_point(size = replace_na(size, 1))),  # geom_point(aes["group"], )
boxplot = list(geom_boxplot(width = .5, size = replace_na(size, .5), na.rm = T, show.legend = F, ...),
stat_summary(aes["group"], geom = "line", position = position_dodge(.5), linewidth = .5, alpha = .7, fun = median, na.rm = T))
)
ggplot(data, aes[names(aes) != "group"]) +
geom + labs(x = xlab, y = ylab) +
theme(legend.position = "bottom")
}
facet <- facet_grid(p ~ p0 + n, labeller = label_both, scales = "free_y")
color <- if (!is.null(model_colors)) scale_color_manual(values = model_colors)
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(time = time[1], .groups = "drop") %>%
fun_simulatePlot("boxplot", aes(x = factor(x), y = time, color = model, group = model),
xlab = "bound", ylab = "running time", outlier.size = .3) +
guides(color = guide_legend(nrow = 4, byrow = TRUE)) +
theme(legend.position = "right") +
# facet +
color
ggsave(paste0("./Running time/ENAR_running_time_", type, ".png"), width = 7.5, height = 9, plot = pp)
}
library(ggplot2)
fun_simulatePlot <- function(data, which = c("boxplot", "line"), aes, xlab, ylab, size = NA_real_, ...) {
which <- match.arg(which)
if (missing(xlab) && !rlang:::quo_is_missing(aes$x)) xlab <- as_label(aes$x)
if (missing(ylab) && !rlang:::quo_is_missing(aes$y)) ylab <- as_label(aes$y)
geom <- switch(
which,
line = list(geom_line(aes["group"]), geom_point(size = replace_na(size, 1))),  # geom_point(aes["group"], )
boxplot = list(geom_boxplot(width = .5, size = replace_na(size, .5), na.rm = T, show.legend = F, ...),
stat_summary(aes["group"], geom = "line", position = position_dodge(.5), linewidth = .3, alpha = .6, fun = median, na.rm = T))
)
ggplot(data, aes[names(aes) != "group"]) +
geom + labs(x = xlab, y = ylab, color = NULL) +
theme(legend.position = "bottom")
}
facet <- facet_grid(p ~ p0 + n, labeller = label_both, scales = "free_y")
DART_AUC_res = read_csv("./AUC/DART_AUC.csv", show_col_types = FALSE)
XGBoost_AUC_res = read_csv("./AUC/XGBoost_AUC.csv", show_col_types = FALSE)
RF_AUC_res = read_csv("./AUC/RF_AUC.csv", show_col_types = FALSE)
RFMD_AUC_res = read_csv("./AUC/RFMD_AUC.csv", show_col_types = FALSE)
BART_AUC_res = read_csv("./AUC/BART_AUC.csv", show_col_types = FALSE)
ALT_CIF_AUC_res = read_csv("./AUC/ALT_CIF_AUC.csv", show_col_types = FALSE)
AUC_res = rbind(DART_AUC_res, XGBoost_AUC_res, RF_AUC_res, RFMD_AUC_res, BART_AUC_res, ALT_CIF_AUC_res) %>% filter(! model %in% c("XGBoost_Cover_1000permu", "XGBoost_Gain_1000permu", "RF_Impu_1000permu", "RF_CImpu_1000permu", "RF_Permu_1000permu", "BART_L_1000permu", "BART_GM_1000permu", "BART_GSE_1000permu", "ALT_CIF_1000permu", "BART_GM_100permu", "BART_GSE_100permu",
"DART20", "DART200", "RF_CImpu_100permu", "XGBoost_Cover_100permu"))
AUC_res$model[which(AUC_res$model == "RF_Impu_100permu")] = "RF_Impurity"
AUC_res$model[which(AUC_res$model == "RF_Permu_100permu")] = "RF_Permutation"
AUC_res$model[which(AUC_res$model == "BART_L_100permu")] = "BART"
AUC_res$model[which(AUC_res$model == "ALT_CIF_100permu")] = "CIF"
AUC_res$model[which(AUC_res$model == "XGBoost_Gain_100permu")] = "XGBoost_Gain"
AUC_res$model = factor(AUC_res$model, levels = c("BART", "DART50",
"RF_Impurity", "RF_Permutation",
"RF_MinDepth", "CIF", "XGBoost_Gain"))
model_colors = c( "DART50" = "red",
"XGBoost_Gain"="blue4",
"RF_Impurity"="green4", "RF_Permutation"="palegreen",
"RF_MinDepth"="darkturquoise", "BART"="purple", "CIF"="orange")
color <- if (!is.null(model_colors)) scale_color_manual(values = model_colors)
for(dat_type in c("lm", "glm", "cox")){
auc_data = AUC_res %>% filter(type == dat_type & p0 == 3 &
p == 15 & n == 150)
pic = auc_data %>% fun_simulatePlot("boxplot", aes(x = factor(x), y = AUC, color = model, group = model),
xlab = "bound", ylab = "AUC", outlier.size = .3) +
guides(color = guide_legend(nrow = 1)) +
color
ggsave(paste0("./AUC/ENAR_AUC_", dat_type,".png"), pic, height = 13, width = 19)
}
library(readr)
library(tidyverse)
library(ggplot2)
simu_res_full = read_csv("./ROC/Combined_data_ROC.csv", show_col_types = FALSE)
simu_res_full = filter(simu_res_full, model %in% c("DART50",
"XGBoost_Gain",
"RF_Impu", "RF_Permu",
"RF_MinDepth", "BART_Local", "ALT_CIF"))
simu_res_full$model[which(simu_res_full$model == "RF_Impu")] = "RF_Impurity"
simu_res_full$model[which(simu_res_full$model == "RF_Permu")] = "RF_Permutation"
simu_res_full$model[which(simu_res_full$model == "BART_Local")] = "BART"
simu_res_full$model[which(simu_res_full$model == "ALT_CIF")] = "CIF"
simu_res_full$model = factor(simu_res_full$model, levels = c("BART", "DART50",
"RF_Impurity", "RF_Permutation",
"RF_MinDepth", "CIF", "XGBoost_Gain"))
simu_res_full$signal = as.integer(simu_res_full$true_beta != 0)
xs = sort(unique(simu_res_full$x))
model_colors = c( "DART50" = "red",
"XGBoost_Gain"="blue4",
"RF_Impurity"="green4", "RF_Permutation"="palegreen",
"RF_MinDepth"="darkturquoise", "BART"="purple", "CIF"="orange")
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
if(type == "cox") nrow_legend = 3
else nrow_legend = 4
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(plotROC::StatRoc$compute_group(data.frame(d = signal, m = pval), increasing = F), .groups = "drop_last") %>%
mutate(row_number = row_number()) %>%
ungroup("rep") %>% group_by(row_number, .add = T) %>%
summarise(across(c(false_positive_fraction, true_positive_fraction, cutoffs), mean), .groups = "drop") %>%
ggplot(aes(x = false_positive_fraction, y = true_positive_fraction, label = cutoffs, color = model)) +
plotROC::geom_roc(stat = "identity", n.cuts = 0, size = .5, linealpha = .7) +
geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
facet_wrap(~ bound, ncol = 2, labeller = label_both) +
# labs(title = paste("bound =", dt_temp$bound[1]), color = NULL) +
coord_fixed() + theme(legend.position = "right") +
guides(color = guide_legend(nrow = nrow_legend, byrow = TRUE)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./ROC/ENAR_", type, ".png"), width = 7.5, height = 9)
}
library(readr)
library(tidyverse)
library(ggplot2)
simu_res_full = read_csv("./ROC/Combined_data_ROC.csv", show_col_types = FALSE)
simu_res_full = filter(simu_res_full, model %in% c("DART50",
"XGBoost_Gain",
"RF_Impu", "RF_Permu",
"RF_MinDepth", "BART_Local", "ALT_CIF"))
simu_res_full$model[which(simu_res_full$model == "RF_Impu")] = "RF_Impurity"
simu_res_full$model[which(simu_res_full$model == "RF_Permu")] = "RF_Permutation"
simu_res_full$model[which(simu_res_full$model == "BART_Local")] = "BART"
simu_res_full$model[which(simu_res_full$model == "ALT_CIF")] = "CIF"
simu_res_full$model = factor(simu_res_full$model, levels = c("BART", "DART50",
"RF_Impurity", "RF_Permutation",
"RF_MinDepth", "CIF", "XGBoost_Gain"))
model_colors = c( "DART50" = "red",
"XGBoost_Gain"="blue4",
"RF_Impurity"="green4", "RF_Permutation"="palegreen",
"RF_MinDepth"="darkturquoise", "BART"="purple", "CIF"="orange")
fun_simulatePlot <- function(data, which = c("boxplot", "line"), aes, xlab, ylab, size = NA_real_, ...) {
which <- match.arg(which)
if (missing(xlab) && !rlang:::quo_is_missing(aes$x)) xlab <- as_label(aes$x)
if (missing(ylab) && !rlang:::quo_is_missing(aes$y)) ylab <- as_label(aes$y)
geom <- switch(
which,
line = list(geom_line(aes["group"]), geom_point(size = replace_na(size, 1))),  # geom_point(aes["group"], )
boxplot = list(geom_boxplot(width = .5, size = replace_na(size, .5), na.rm = T, show.legend = F, ...),
stat_summary(aes["group"], geom = "line", position = position_dodge(.5), linewidth = .5, alpha = .7, fun = median, na.rm = T))
)
ggplot(data, aes[names(aes) != "group"]) +
geom + labs(x = xlab, y = ylab) +
theme(legend.position = "bottom")
}
facet <- facet_grid(p ~ p0 + n, labeller = label_both, scales = "free_y")
color <- if (!is.null(model_colors)) scale_color_manual(values = model_colors)
for(type in c("lm", "glm", "cox")){
cat(type, "\n\n")
simu_res = simu_res_full[which(simu_res_full$type == type & simu_res_full$p0 == 3 &
simu_res_full$p == 15 & simu_res_full$n == 150), ]
if(type == "cox") nrow_legend = 3
else nrow_legend = 4
pp <- simu_res %>%
group_by(across(c(1:"p", "model", "x"))) %>%
summarise(time = time[1], .groups = "drop") %>%
fun_simulatePlot("boxplot", aes(x = factor(x), y = time, color = model, group = model),
xlab = "bound", ylab = "running time", outlier.size = .3) +
guides(color = guide_legend(nrow = nrow_legend, byrow = TRUE)) +
theme(legend.position = "right") +
# facet +
color
ggsave(paste0("./Running time/ENAR_running_time_", type, ".png"), width = 7.5, height = 9, plot = pp)
}
library(ggplot2)
fun_simulatePlot <- function(data, which = c("boxplot", "line"), aes, xlab, ylab, size = NA_real_, ...) {
which <- match.arg(which)
if (missing(xlab) && !rlang:::quo_is_missing(aes$x)) xlab <- as_label(aes$x)
if (missing(ylab) && !rlang:::quo_is_missing(aes$y)) ylab <- as_label(aes$y)
geom <- switch(
which,
line = list(geom_line(aes["group"]), geom_point(size = replace_na(size, 1))),  # geom_point(aes["group"], )
boxplot = list(geom_boxplot(width = .5, size = replace_na(size, .5), na.rm = T, show.legend = F, ...),
stat_summary(aes["group"], geom = "line", position = position_dodge(.5), linewidth = .3, alpha = .6, fun = median, na.rm = T))
)
ggplot(data, aes[names(aes) != "group"]) +
geom + labs(x = xlab, y = ylab) +
theme(legend.position = "bottom")
}
facet <- facet_grid(p ~ p0 + n, labeller = label_both, scales = "free_y")
DART_AUC_res = read_csv("./AUC/DART_AUC.csv", show_col_types = FALSE)
XGBoost_AUC_res = read_csv("./AUC/XGBoost_AUC.csv", show_col_types = FALSE)
RF_AUC_res = read_csv("./AUC/RF_AUC.csv", show_col_types = FALSE)
RFMD_AUC_res = read_csv("./AUC/RFMD_AUC.csv", show_col_types = FALSE)
BART_AUC_res = read_csv("./AUC/BART_AUC.csv", show_col_types = FALSE)
ALT_CIF_AUC_res = read_csv("./AUC/ALT_CIF_AUC.csv", show_col_types = FALSE)
AUC_res = rbind(DART_AUC_res, XGBoost_AUC_res, RF_AUC_res, RFMD_AUC_res, BART_AUC_res, ALT_CIF_AUC_res) %>% filter(! model %in% c("XGBoost_Cover_1000permu", "XGBoost_Gain_1000permu", "RF_Impu_1000permu", "RF_CImpu_1000permu", "RF_Permu_1000permu", "BART_L_1000permu", "BART_GM_1000permu", "BART_GSE_1000permu", "ALT_CIF_1000permu", "BART_GM_100permu", "BART_GSE_100permu",
"DART20", "DART200", "RF_CImpu_100permu", "XGBoost_Cover_100permu"))
AUC_res$model[which(AUC_res$model == "RF_Impu_100permu")] = "RF_Impurity"
AUC_res$model[which(AUC_res$model == "RF_Permu_100permu")] = "RF_Permutation"
AUC_res$model[which(AUC_res$model == "BART_L_100permu")] = "BART"
AUC_res$model[which(AUC_res$model == "ALT_CIF_100permu")] = "CIF"
AUC_res$model[which(AUC_res$model == "XGBoost_Gain_100permu")] = "XGBoost_Gain"
AUC_res$model = factor(AUC_res$model, levels = c("BART", "DART50",
"RF_Impurity", "RF_Permutation",
"RF_MinDepth", "CIF", "XGBoost_Gain"))
model_colors = c( "DART50" = "red",
"XGBoost_Gain"="blue4",
"RF_Impurity"="green4", "RF_Permutation"="palegreen",
"RF_MinDepth"="darkturquoise", "BART"="purple", "CIF"="orange")
for(dat_type in c("lm", "glm", "cox")){
auc_data = AUC_res %>% filter(type == dat_type & p0 == 3 &
p == 15 & n == 150)
if(type == "cox") nrow_legend = 3
else nrow_legend = 4
pic = auc_data %>% fun_simulatePlot("boxplot", aes(x = factor(x), y = AUC, color = model, group = model),
xlab = "bound", ylab = "AUC", outlier.size = .3) +
theme(legend.position = "right") +
guides(color = guide_legend(nrow = nrow_legend, byrow = TRUE)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./AUC/ENAR_AUC_", dat_type,".png"), pic, height = 13, width = 19)
}
for(dat_type in c("lm", "glm", "cox")){
auc_data = AUC_res %>% filter(type == dat_type & p0 == 3 &
p == 15 & n == 150)
if(dat_type == "cox") nrow_legend = 3
else nrow_legend = 4
pic = auc_data %>% fun_simulatePlot("boxplot", aes(x = factor(x), y = AUC, color = model, group = model),
xlab = "bound", ylab = "AUC", outlier.size = .3) +
theme(legend.position = "right") +
guides(color = guide_legend(nrow = nrow_legend, byrow = TRUE)) +
scale_color_manual(values=model_colors)
ggsave(paste0("./AUC/ENAR_AUC_", dat_type,".png"), pic, height = 13, width = 19)
}
# load the R functions
# one of the packages (bartMachine) relies on the installation of Java
# so you may need to install java first http://www.java.com
source("RealData_lm.R")
setwd("~/Desktop/Research at UW/8_Vicky/Real Data Analysis")
# load the R functions
# one of the packages (bartMachine) relies on the installation of Java
# so you may need to install java first http://www.java.com
source("RealData_lm.R")
set.seed(1024)
# read the data
dat = read.csv("shiny.ZY.cytokine.anc.csv")
# x is the explanatory variables
# categorical variables should be converted to factor variables
x = select(dat, -Y)
# continuous outcome
y = dat$Y
# 11 different functions for biomarker selection
tmp3 = rf_permutation_importance_lm(x, y)
tmp4 = cif_lm(x, y)
tmp6 = dart50_lm(x, y)
tmp8 = bart_lm(x, y)
source("RealData_lm.R")
set.seed(1024)
# read the data
dat = read.csv("shiny.ZY.cytokine.anc.csv")
# x is the explanatory variables
# categorical variables should be converted to factor variables
x = select(dat, -Y)
# x$var17 = factor(x$var17)
# x$var18 = factor(x$var18)
# x$var21 = factor(x$var21)
# continuous outcome
y = dat$Y
# 11 different functions for biomarker selection
tmp3 = rf_permutation_importance_lm(x, y)
tmp4 = cif_lm(x, y)
tmp6 = dart50_lm(x, y)
tmp8 = bart_lm(x, y)
tmp9 = rf_min_depth_lm(x, y)
tmp10 = XGBoost_lm(x, y)
